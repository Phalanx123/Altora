name: Build and Publish NuGet Package

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v2.1.3
  workflow_dispatch: # Allow manual trigger from GitHub UI
    inputs:
      version:
        description: 'Version to publish (optional - will use project version if not specified)'
        required: false
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore
      
      # Build the project
      - name: Build
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
      # Run tests (if you have any)
      - name: Run tests
        run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --results-directory TestResults
        continue-on-error: false
      
      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/*.trx
      
      # Extract version from tag or use manual input
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=1.0.0-preview-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
      
      # Pack the NuGet package with version
      - name: Pack NuGet package
        run: |
          dotnet pack --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --output ./artifacts \
            -p:Version=${{ steps.version.outputs.VERSION }} \
            -p:PackageReleaseNotes="Release ${{ steps.version.outputs.VERSION }} - Built from commit ${{ github.sha }}"
      
      # Upload package artifacts
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package-${{ steps.version.outputs.VERSION }}
          path: ./artifacts/*.nupkg
      
      # Publish to NuGet.org
      - name: Publish to NuGet.org
        run: |
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
      
      # Create GitHub Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in this Release
            - Automated release for version ${{ steps.version.outputs.VERSION }}
            - Built from commit ${{ github.sha }}
            
            ## NuGet Package
            This release is available on NuGet.org: